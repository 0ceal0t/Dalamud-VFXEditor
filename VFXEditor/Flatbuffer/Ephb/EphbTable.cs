// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace VFXEditor.Flatbuffer.Ephb
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EphbTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EphbTable GetRootAsEphbTable(ByteBuffer _bb) { return GetRootAsEphbTable(_bb, new EphbTable()); }
  public static EphbTable GetRootAsEphbTable(ByteBuffer _bb, EphbTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EphbTableBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EPHB"); }
  public static bool VerifyEphbTable(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EPHB", false, EphbTableVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EphbTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public VFXEditor.Flatbuffer.Ephb.EphbUnknownT? Unknown1 { get { int o = __p.__offset(4); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbUnknownT?)(new VFXEditor.Flatbuffer.Ephb.EphbUnknownT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public VFXEditor.Flatbuffer.Ephb.EphbUnknownT? Unknown2 { get { int o = __p.__offset(6); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbUnknownT?)(new VFXEditor.Flatbuffer.Ephb.EphbUnknownT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public VFXEditor.Flatbuffer.Ephb.EphbAlpha? Alpha(int j) { int o = __p.__offset(8); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbAlpha?)(new VFXEditor.Flatbuffer.Ephb.EphbAlpha()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AlphaLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<VFXEditor.Flatbuffer.Ephb.EphbTable> CreateEphbTable(FlatBufferBuilder builder,
      Offset<VFXEditor.Flatbuffer.Ephb.EphbUnknownT> unknown1Offset = default(Offset<VFXEditor.Flatbuffer.Ephb.EphbUnknownT>),
      Offset<VFXEditor.Flatbuffer.Ephb.EphbUnknownT> unknown2Offset = default(Offset<VFXEditor.Flatbuffer.Ephb.EphbUnknownT>),
      VectorOffset alphaOffset = default(VectorOffset)) {
    builder.StartTable(3);
    EphbTable.AddAlpha(builder, alphaOffset);
    EphbTable.AddUnknown2(builder, unknown2Offset);
    EphbTable.AddUnknown1(builder, unknown1Offset);
    return EphbTable.EndEphbTable(builder);
  }

  public static void StartEphbTable(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUnknown1(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbUnknownT> unknown1Offset) { builder.AddOffset(0, unknown1Offset.Value, 0); }
  public static void AddUnknown2(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbUnknownT> unknown2Offset) { builder.AddOffset(1, unknown2Offset.Value, 0); }
  public static void AddAlpha(FlatBufferBuilder builder, VectorOffset alphaOffset) { builder.AddOffset(2, alphaOffset.Value, 0); }
  public static VectorOffset CreateAlphaVector(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAlphaVectorBlock(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlphaVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlphaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAlphaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<VFXEditor.Flatbuffer.Ephb.EphbTable> EndEphbTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<VFXEditor.Flatbuffer.Ephb.EphbTable>(o);
  }
  public static void FinishEphbTableBuffer(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbTable> offset) { builder.Finish(offset.Value, "EPHB"); }
  public static void FinishSizePrefixedEphbTableBuffer(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbTable> offset) { builder.FinishSizePrefixed(offset.Value, "EPHB"); }
}


static public class EphbTableVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Unknown1*/, VFXEditor.Flatbuffer.Ephb.EphbUnknownTVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*Unknown2*/, VFXEditor.Flatbuffer.Ephb.EphbUnknownTVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Alpha*/, VFXEditor.Flatbuffer.Ephb.EphbAlphaVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
