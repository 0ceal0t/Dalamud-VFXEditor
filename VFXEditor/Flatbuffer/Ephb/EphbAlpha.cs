// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace VFXEditor.Flatbuffer.Ephb
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EphbAlpha : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EphbAlpha GetRootAsEphbAlpha(ByteBuffer _bb) { return GetRootAsEphbAlpha(_bb, new EphbAlpha()); }
  public static EphbAlpha GetRootAsEphbAlpha(ByteBuffer _bb, EphbAlpha obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EphbAlpha __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public VFXEditor.Flatbuffer.Ephb.EphbBeta? Beta(int j) { int o = __p.__offset(4); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbBeta?)(new VFXEditor.Flatbuffer.Ephb.EphbBeta()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BetaLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public VFXEditor.Flatbuffer.Ephb.EphbEta? Eta(int j) { int o = __p.__offset(6); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbEta?)(new VFXEditor.Flatbuffer.Ephb.EphbEta()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EtaLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public VFXEditor.Flatbuffer.Ephb.EphbEpsilon? Epsilon(int j) { int o = __p.__offset(8); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbEpsilon?)(new VFXEditor.Flatbuffer.Ephb.EphbEpsilon()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EpsilonLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Unknown1 { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public VFXEditor.Flatbuffer.Ephb.EphbZeta? Zeta { get { int o = __p.__offset(12); return o != 0 ? (VFXEditor.Flatbuffer.Ephb.EphbZeta?)(new VFXEditor.Flatbuffer.Ephb.EphbZeta()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha> CreateEphbAlpha(FlatBufferBuilder builder,
      VectorOffset betaOffset = default(VectorOffset),
      VectorOffset etaOffset = default(VectorOffset),
      VectorOffset epsilonOffset = default(VectorOffset),
      bool unknown1 = false,
      Offset<VFXEditor.Flatbuffer.Ephb.EphbZeta> zetaOffset = default(Offset<VFXEditor.Flatbuffer.Ephb.EphbZeta>)) {
    builder.StartTable(5);
    EphbAlpha.AddZeta(builder, zetaOffset);
    EphbAlpha.AddEpsilon(builder, epsilonOffset);
    EphbAlpha.AddEta(builder, etaOffset);
    EphbAlpha.AddBeta(builder, betaOffset);
    EphbAlpha.AddUnknown1(builder, unknown1);
    return EphbAlpha.EndEphbAlpha(builder);
  }

  public static void StartEphbAlpha(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddBeta(FlatBufferBuilder builder, VectorOffset betaOffset) { builder.AddOffset(0, betaOffset.Value, 0); }
  public static VectorOffset CreateBetaVector(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbBeta>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBetaVectorBlock(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbBeta>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBetaVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<VFXEditor.Flatbuffer.Ephb.EphbBeta>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBetaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<VFXEditor.Flatbuffer.Ephb.EphbBeta>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBetaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEta(FlatBufferBuilder builder, VectorOffset etaOffset) { builder.AddOffset(1, etaOffset.Value, 0); }
  public static VectorOffset CreateEtaVector(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbEta>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEtaVectorBlock(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbEta>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtaVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<VFXEditor.Flatbuffer.Ephb.EphbEta>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<VFXEditor.Flatbuffer.Ephb.EphbEta>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEtaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEpsilon(FlatBufferBuilder builder, VectorOffset epsilonOffset) { builder.AddOffset(2, epsilonOffset.Value, 0); }
  public static VectorOffset CreateEpsilonVector(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbEpsilon>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEpsilonVectorBlock(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbEpsilon>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEpsilonVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<VFXEditor.Flatbuffer.Ephb.EphbEpsilon>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEpsilonVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<VFXEditor.Flatbuffer.Ephb.EphbEpsilon>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEpsilonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnknown1(FlatBufferBuilder builder, bool unknown1) { builder.AddBool(3, unknown1, false); }
  public static void AddZeta(FlatBufferBuilder builder, Offset<VFXEditor.Flatbuffer.Ephb.EphbZeta> zetaOffset) { builder.AddOffset(4, zetaOffset.Value, 0); }
  public static Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha> EndEphbAlpha(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<VFXEditor.Flatbuffer.Ephb.EphbAlpha>(o);
  }
}


static public class EphbAlphaVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Beta*/, VFXEditor.Flatbuffer.Ephb.EphbBetaVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Eta*/, VFXEditor.Flatbuffer.Ephb.EphbEtaVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Epsilon*/, VFXEditor.Flatbuffer.Ephb.EphbEpsilonVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Unknown1*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 12 /*Zeta*/, VFXEditor.Flatbuffer.Ephb.EphbZetaVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
